{"ast":null,"code":"var _jsxFileName = \"/Users/danulingam/Desktop/Ebuy/front-end/src/components/UpdateComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UpdateProduct = () => {\n  _s();\n  const [name, setProductName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [company, setCompany] = useState(\"\");\n  const {\n    id\n  } = useParams();\n  useEffect(() => {\n    const fetchProductDetails = async () => {\n      try {\n        const response = await fetch(`/product/${id}`);\n        if (!response.ok) {\n          throw new Error(`Error: ${response.status} - ${response.statusText}`);\n        }\n        const contentType = response.headers.get(\"content-type\");\n        if (!contentType || !contentType.includes(\"application/json\")) {\n          throw new Error(\"Invalid content type. Expected JSON.\");\n        }\n        const data = await response.json();\n        if (data.result !== \"No record found\") {\n          // Set the initial state based on fetched product details\n          setProductName(data.name);\n          setPrice(data.price);\n          setCategory(data.category);\n          setCompany(data.company);\n        } else {\n          console.error(\"No record found\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching product details:\", error.message);\n      }\n    };\n    fetchProductDetails();\n  }, [id]);\n  const updateProductData = async () => {\n    // Implement your update logic here\n    console.warn(name, price, category, company);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"addproduct\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Update product\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      placeholder: name,\n      value: name,\n      onChange: e => setProductName(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      placeholder: price,\n      value: price,\n      onChange: e => setPrice(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      placeholder: category,\n      value: category,\n      onChange: e => setCategory(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"inputBox\",\n      type: \"text\",\n      placeholder: company,\n      value: company,\n      onChange: e => setCompany(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: updateProductData,\n      className: \"appButton\",\n      type: \"button\",\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(UpdateProduct, \"C6t/TXeZglHV/GTnzBvOm8LtbQs=\", false, function () {\n  return [useParams];\n});\n_c = UpdateProduct;\nexport default UpdateProduct;\nvar _c;\n$RefreshReg$(_c, \"UpdateProduct\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","UpdateProduct","_s","name","setProductName","price","setPrice","category","setCategory","company","setCompany","id","fetchProductDetails","response","fetch","ok","Error","status","statusText","contentType","headers","get","includes","data","json","result","console","error","message","updateProductData","warn","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/danulingam/Desktop/Ebuy/front-end/src/components/UpdateComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst UpdateProduct = () => {\n    const [name, setProductName] = useState(\"\");\n    const [price, setPrice] = useState(\"\");\n    const [category, setCategory] = useState(\"\");\n    const [company, setCompany] = useState(\"\");\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        const fetchProductDetails = async () => {\n            try {\n                const response = await fetch(`/product/${id}`);\n                if (!response.ok) {\n                    throw new Error(`Error: ${response.status} - ${response.statusText}`);\n                }\n\n                const contentType = response.headers.get(\"content-type\");\n                if (!contentType || !contentType.includes(\"application/json\")) {\n                    throw new Error(\"Invalid content type. Expected JSON.\");\n                }\n\n                const data = await response.json();\n\n                if (data.result !== \"No record found\") {\n                    // Set the initial state based on fetched product details\n                    setProductName(data.name);\n                    setPrice(data.price);\n                    setCategory(data.category);\n                    setCompany(data.company);\n                } else {\n                    console.error(\"No record found\");\n                }\n            } catch (error) {\n                console.error(\"Error fetching product details:\", error.message);\n            }\n        };\n\n        fetchProductDetails();\n    }, [id]);\n\n    const updateProductData = async () => {\n        // Implement your update logic here\n        console.warn(name, price, category, company);\n    };\n\n    return (\n        <div className=\"addproduct\">\n            <h1>Update product</h1>\n            <input className=\"inputBox\" type=\"text\" placeholder={name}  value={name} onChange={(e) => setProductName(e.target.value)} />\n            <input className=\"inputBox\" type=\"text\" placeholder={price}  value={price} onChange={(e) => setPrice(e.target.value)} />\n            <input className=\"inputBox\" type=\"text\" placeholder={category} value={category} onChange={(e) => setCategory(e.target.value)} />\n            <input className=\"inputBox\" type=\"text\" placeholder={company}  value={company} onChange={(e) => setCompany(e.target.value)} />\n            <button onClick={updateProductData} className=\"appButton\" type=\"button\">Update</button>\n        </div>\n    );\n};\n\nexport default UpdateProduct;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7C,MAAMC,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC3C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAM;IAAEe;EAAG,CAAC,GAAGb,SAAS,CAAC,CAAC;EAE1BD,SAAS,CAAC,MAAM;IACZ,MAAMe,mBAAmB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,YAAWH,EAAG,EAAC,CAAC;QAC9C,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAE,UAASH,QAAQ,CAACI,MAAO,MAAKJ,QAAQ,CAACK,UAAW,EAAC,CAAC;QACzE;QAEA,MAAMC,WAAW,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QACxD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC3D,MAAM,IAAIN,KAAK,CAAC,sCAAsC,CAAC;QAC3D;QAEA,MAAMO,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,CAACE,MAAM,KAAK,iBAAiB,EAAE;UACnC;UACArB,cAAc,CAACmB,IAAI,CAACpB,IAAI,CAAC;UACzBG,QAAQ,CAACiB,IAAI,CAAClB,KAAK,CAAC;UACpBG,WAAW,CAACe,IAAI,CAAChB,QAAQ,CAAC;UAC1BG,UAAU,CAACa,IAAI,CAACd,OAAO,CAAC;QAC5B,CAAC,MAAM;UACHiB,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAC;QACpC;MACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAACC,OAAO,CAAC;MACnE;IACJ,CAAC;IAEDhB,mBAAmB,CAAC,CAAC;EACzB,CAAC,EAAE,CAACD,EAAE,CAAC,CAAC;EAER,MAAMkB,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IAClC;IACAH,OAAO,CAACI,IAAI,CAAC3B,IAAI,EAAEE,KAAK,EAAEE,QAAQ,EAAEE,OAAO,CAAC;EAChD,CAAC;EAED,oBACIT,OAAA;IAAK+B,SAAS,EAAC,YAAY;IAAAC,QAAA,gBACvBhC,OAAA;MAAAgC,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvBpC,OAAA;MAAO+B,SAAS,EAAC,UAAU;MAACM,IAAI,EAAC,MAAM;MAACC,WAAW,EAAEnC,IAAK;MAAEoC,KAAK,EAAEpC,IAAK;MAACqC,QAAQ,EAAGC,CAAC,IAAKrC,cAAc,CAACqC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5HpC,OAAA;MAAO+B,SAAS,EAAC,UAAU;MAACM,IAAI,EAAC,MAAM;MAACC,WAAW,EAAEjC,KAAM;MAAEkC,KAAK,EAAElC,KAAM;MAACmC,QAAQ,EAAGC,CAAC,IAAKnC,QAAQ,CAACmC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACxHpC,OAAA;MAAO+B,SAAS,EAAC,UAAU;MAACM,IAAI,EAAC,MAAM;MAACC,WAAW,EAAE/B,QAAS;MAACgC,KAAK,EAAEhC,QAAS;MAACiC,QAAQ,EAAGC,CAAC,IAAKjC,WAAW,CAACiC,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAChIpC,OAAA;MAAO+B,SAAS,EAAC,UAAU;MAACM,IAAI,EAAC,MAAM;MAACC,WAAW,EAAE7B,OAAQ;MAAE8B,KAAK,EAAE9B,OAAQ;MAAC+B,QAAQ,EAAGC,CAAC,IAAK/B,UAAU,CAAC+B,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9HpC,OAAA;MAAQ2C,OAAO,EAAEd,iBAAkB;MAACE,SAAS,EAAC,WAAW;MAACM,IAAI,EAAC,QAAQ;MAAAL,QAAA,EAAC;IAAM;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtF,CAAC;AAEd,CAAC;AAAClC,EAAA,CAvDID,aAAa;EAAA,QAMAH,SAAS;AAAA;AAAA8C,EAAA,GANtB3C,aAAa;AAyDnB,eAAeA,aAAa;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}